[{"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/index.js":"1","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/App.js":"2","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/reportWebVitals.js":"3","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/modals/LoginModal.js":"4","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/ActionPanel.js":"5","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/Map.js":"6","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/axiosInstance.js":"7","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/userContext.js":"8","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/modals/MyProductsModal.js":"9","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/modals/OwnerOrdersModal.js":"10","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/modals/ConsumerOrdersModal.js":"11"},{"size":548,"mtime":1610561163306,"results":"12","hashOfConfig":"13"},{"size":1530,"mtime":1610985927972,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1609943077478,"results":"15","hashOfConfig":"13"},{"size":2308,"mtime":1610667344013,"results":"16","hashOfConfig":"13"},{"size":3802,"mtime":1611012078464,"results":"17","hashOfConfig":"13"},{"size":1728,"mtime":1611060237494,"results":"18","hashOfConfig":"13"},{"size":334,"mtime":1610722883084,"results":"19","hashOfConfig":"13"},{"size":87,"mtime":1610663908074,"results":"20","hashOfConfig":"13"},{"size":3553,"mtime":1611009338364,"results":"21","hashOfConfig":"13"},{"size":3147,"mtime":1610975836899,"results":"22","hashOfConfig":"13"},{"size":2215,"mtime":1610976802871,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ajn9li",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/index.js",[],["51","52"],"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/App.js",["53","54"],"import \"./App.css\";\nimport { Icon } from \"leaflet\";\nimport { useEffect, useState, createContext } from 'react';\nimport { axiosInstance } from './components/axiosInstance';\nimport { ActionPanel } from './components/ActionPanel';\nimport { Map } from './components/Map';\nimport { UserContext } from './components/userContext';\n\nconst cat = new Icon({\n  iconUrl: \"./cat-svgrepo-com.svg\",\n  iconSize: [50, 50]\n});\n\n\n\n\nfunction App() {\n\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined,\n    role: undefined\n  });\n\n\n\n  useEffect(() => {\n    console.log('App-EFFECT');\n\n    const checkLoggedIn = async () => {\n      let token = localStorage.getItem('auth-token');\n      if (token === null) {\n        localStorage.setItem('auth-token', '');\n        token = '';\n      }\n\n\n      const userInfoResponse = await axiosInstance.get(\"/users/info\", {\n        headers: { \"Authorization\": \"Bearer \" + token }\n      });\n\n\n      if (userInfoResponse !== 'Unauthenticated') {\n        setUserData({\n          token: token,\n          user: userInfoResponse.data.user,\n          role: userInfoResponse.data.role\n        });\n      }\n\n    }\n\n    checkLoggedIn();\n\n  }, []);\n\n  const [fuelType, setFuelType] = useState(\"1\");\n\n\n  return (\n    <>\n      <UserContext.Provider value={{ userData, setUserData }}>\n        <ActionPanel fuelType={fuelType} setFuelType={setFuelType} />\n        <Map fuelType={fuelType} ></Map>\n      </UserContext.Provider>\n      {console.log('APP-render')}\n    </>\n\n  );\n}\n\nexport default App;\n","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/reportWebVitals.js",[],"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/modals/LoginModal.js",[],"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/ActionPanel.js",[],"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/Map.js",["55"],"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/axiosInstance.js",[],"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/userContext.js",[],"/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/modals/MyProductsModal.js",["56","57"],"import React, { useState, useEffect, useContext } from 'react';\nimport { Button, Modal, ListGroup, FormControl } from 'react-bootstrap';\nimport { Form } from 'react-bootstrap';\nimport { axiosInstance } from '../axiosInstance';\nimport { UserContext } from '../userContext';\n\nexport function MyProductsModal({ show, handleClose }) {\n\n  const { userData } = useContext(UserContext);\n  const [myGasStations, setMyGasStations] = useState(undefined);\n  const [products, setProducts] = useState([]);\n  const [selectedStation, setSelectedStation] = useState('');\n  const [newPrice, setNewPrice] = useState('');\n\n\n  useEffect(() => {\n    console.log('GasStations-EFFECT');\n\n    const getGasStations = async () => {\n\n      const stationsResponse = await axiosInstance.get(\"/stations/ownerstations\", {\n        headers: { \"Authorization\": \"Bearer \" + localStorage.getItem('auth-token') }\n      });\n\n\n\n      if (stationsResponse !== 'Unauthenticated') {\n        setMyGasStations(stationsResponse.data);\n        setSelectedStation(stationsResponse.data[0].gasStationID);\n      } else {\n        setMyGasStations(undefined);\n        setSelectedStation('');\n      }\n    }\n\n    getGasStations();\n\n  }, [userData]);\n\n\n\n  useEffect(() => {\n    console.log('ProductsModal-EFFECT');\n\n    const getProducts = async () => {\n\n      const productsResponse = await axiosInstance.get(\"/pricedata/\" + selectedStation, {\n        headers: { \"Authorization\": \"Bearer \" + localStorage.getItem('auth-token') }\n      });\n\n      setProducts(productsResponse.data);\n    }\n\n    getProducts();\n\n  }, [selectedStation, newPrice]);\n\n\n\n\n\n\n\n  return (\n    <>\n      <Modal show={show} onHide={handleClose} >\n        <Modal.Header closeButton>\n          <Modal.Title>My Products</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n          {myGasStations !== undefined ?\n            (<select onChange={(e) => {\n              setSelectedStation(e.target.value);\n            }}>\n              {myGasStations.map((station) => {\n                return <option value={station.gasStationID}>{station.fuelCompNormalName + '---' + station.gasStationOwner}</option>\n              })}\n            </select>) : null}\n\n\n\n          {products !== undefined ? (\n            <ListGroup>\n              {products.map((product) => {\n                return (\n\n                  <ProductItem\n                    key={product.productID}\n                    productID={product.productID}\n                    name={product.fuelName}\n                    price={product.fuelPrice}\n                    setPrice={setNewPrice} />\n\n                );\n              })}\n            </ListGroup>) : null}\n\n        </Modal.Body>\n        <Modal.Footer>\n        </Modal.Footer>\n      </Modal>\n\n    </>\n  );\n}\n\n\nfunction ProductItem({ productID, name, price, setPrice }) {\n\n  const [editable, setEditable] = useState(false);\n  const [changedValue, setChangedValue] = useState(price);\n\n  return (<ListGroup.Item >\n    Name: {name}\n    <br />\n    Price:{editable ? <input type=\"text\" value={changedValue} size=\"4\" onChange={(e) => { setChangedValue(e.target.value) }} /> : price}\n    <Button className=\"m-1\" onClick={() => {\n      if (editable) {\n\n        axiosInstance.put(\"/pricedata/\" + productID,\n          { newPrice: changedValue },\n          {\n            headers: { \"Authorization\": \"Bearer \" + localStorage.getItem('auth-token') }\n          }).then(res => {\n            setPrice(changedValue);\n          })\n\n      }\n\n      setEditable(!editable)\n\n    }}>{editable ? 'Update' : 'Edit'}</Button>\n  </ListGroup.Item>);\n\n}","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/modals/OwnerOrdersModal.js",["58"],"import React, { useState, useEffect, useContext } from 'react';\nimport { Button, Modal, Table } from 'react-bootstrap';\nimport { Form } from 'react-bootstrap';\nimport { axiosInstance } from '../axiosInstance';\nimport { UserContext } from '../userContext';\n\nexport function OwnerOrdersModal({ show, handleClose }) {\n\n  const { userData } = useContext(UserContext);\n  const [orders, setOrders] = useState(undefined);\n  const [orderRemoved, setOrderRemoved] = useState(undefined);\n\n\n  useEffect(() => {\n    console.log('ownerOrders-EFFECT');\n\n    const getOrders = async () => {\n\n      const ordersResponse = await axiosInstance.get(\"/orders/\", {\n        headers: { \"Authorization\": \"Bearer \" + localStorage.getItem('auth-token') }\n      });\n\n\n\n      if (ordersResponse !== 'Unauthenticated') {\n        setOrders(ordersResponse.data);\n      } else {\n        setOrders(undefined);\n      }\n    }\n\n    getOrders();\n\n  }, [userData, orderRemoved]);\n\n\n\n  return (\n    <>\n      <Modal size=\"lg\" show={show} onHide={handleClose} >\n        <Modal.Header closeButton>\n          <Modal.Title>My Orders</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n          {orders !== undefined ? (\n            <Table responsive striped bordered hover size=\"sm\">\n              <thead>\n                <tr>\n                  <th>Station Name</th>\n                  <th>Station Address</th>\n                  <th>User</th>\n                  <th>Fuel</th>\n                  <th>Quantity</th>\n                  <th>Total Price &euro;</th>\n                  <th>Date</th>\n                </tr>\n              </thead>\n              <tbody>\n\n                {orders.map((order) => {\n\n                  return (\n\n                    <OrderItemRow\n                      key={order.orderID}\n                      orderID={order.orderID}\n                      stationName={order.fuelCompNormalName}\n                      stationAddress={order.gasStationAddress}\n                      user={order.username}\n                      fuelName={order.fuelName}\n                      quantity={order.quantity}\n                      totalPrice={order.totalPrice}\n                      date={order.when}\n                      setOrderRemoved={setOrderRemoved}\n                    />\n\n                  );\n                })}\n\n              </tbody>\n            </Table>) : null}\n\n        </Modal.Body>\n        <Modal.Footer>\n        </Modal.Footer>\n      </Modal>\n\n    </>\n  );\n}\n\n\nfunction OrderItemRow({ orderID,\n  stationName,\n  stationAddress,\n  user,\n  fuelName,\n  quantity,\n  totalPrice, date, setOrderRemoved }) {\n\n  return (\n    <tr>\n      <td>{stationName}</td>\n      <td>{stationAddress}</td>\n      <td>{user}</td>\n      <td>{fuelName}</td>\n      <td>{quantity}</td>\n      <td>{totalPrice}</td>\n      <td>{new Date(date).toLocaleString()}</td>\n      <td><Button variant=\"danger\" onClick={() => {\n\n        axiosInstance.delete(\"/orders/\" + orderID,\n          {\n            headers: { \"Authorization\": \"Bearer \" + localStorage.getItem('auth-token') }\n          }).then(res => {\n            setOrderRemoved(orderID);\n          })\n\n      }}>remove</Button></td>\n    </tr>);\n\n}","/home/chris/Desktop/fuel_proj/front_end/fuel-app/src/components/modals/ConsumerOrdersModal.js",["59","60"],"import React, { useState, useEffect, useContext } from 'react';\nimport { Button, Modal, Table } from 'react-bootstrap';\nimport { Form } from 'react-bootstrap';\nimport { axiosInstance } from '../axiosInstance';\nimport { UserContext } from '../userContext';\n\nexport function ConsumerOrdersModal({ show, handleClose }) {\n\n const { userData } = useContext(UserContext);\n const [orders, setOrders] = useState(undefined);\n\n\n useEffect(() => {\n  console.log('ownerOrders-EFFECT');\n\n  const getOrders = async () => {\n\n   const ordersResponse = await axiosInstance.get(\"/orders/\", {\n    headers: { \"Authorization\": \"Bearer \" + localStorage.getItem('auth-token') }\n   });\n\n\n\n   if (ordersResponse !== 'Unauthenticated') {\n    setOrders(ordersResponse.data);\n   } else {\n    setOrders(undefined);\n   }\n  }\n\n  getOrders();\n\n }, [userData]);\n\n\n\n return (\n  <>\n   <Modal size=\"lg\" show={show} onHide={handleClose} >\n    <Modal.Header closeButton>\n     <Modal.Title>My Orders</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n\n     {orders !== undefined ? (\n      <Table responsive striped bordered hover size=\"sm\">\n       <thead>\n        <tr>\n         <th>Station Name</th>\n         <th>Station Address</th>\n         <th>Fuel</th>\n         <th>Quantity</th>\n         <th>Total Price &euro;</th>\n         <th>Date</th>\n        </tr>\n       </thead>\n       <tbody>\n\n        {orders.map((order) => {\n\n         return (\n\n          <OrderItemRow\n           key={order.orderID}\n           orderID={order.orderID}\n           stationName={order.fuelCompNormalName}\n           stationAddress={order.gasStationAddress}\n           fuelName={order.fuelName}\n           quantity={order.quantity}\n           totalPrice={order.totalPrice}\n           date={order.when}\n          />\n\n         );\n        })}\n\n       </tbody>\n      </Table>) : null}\n\n    </Modal.Body>\n    <Modal.Footer>\n    </Modal.Footer>\n   </Modal>\n\n  </>\n );\n}\n\n\nfunction OrderItemRow({ orderID,\n stationName,\n stationAddress,\n fuelName,\n quantity,\n totalPrice, date }) {\n\n return (\n  <tr>\n   <td>{stationName}</td>\n   <td>{stationAddress}</td>\n   <td>{fuelName}</td>\n   <td>{quantity}</td>\n   <td>{totalPrice}</td>\n   <td>{new Date(date).toLocaleString()}</td>\n  </tr>);\n\n}",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":3,"column":31,"nodeType":"67","messageId":"68","endLine":3,"endColumn":44},{"ruleId":"65","severity":1,"message":"69","line":9,"column":7,"nodeType":"67","messageId":"68","endLine":9,"endColumn":10},{"ruleId":"70","severity":1,"message":"71","line":12,"column":7,"nodeType":"72","endLine":12,"endColumn":52},{"ruleId":"65","severity":1,"message":"73","line":2,"column":36,"nodeType":"67","messageId":"68","endLine":2,"endColumn":47},{"ruleId":"65","severity":1,"message":"74","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":14},{"ruleId":"65","severity":1,"message":"74","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":14},{"ruleId":"65","severity":1,"message":"75","line":2,"column":10,"nodeType":"67","messageId":"68","endLine":2,"endColumn":16},{"ruleId":"65","severity":1,"message":"74","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":14},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'cat' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FormControl' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]